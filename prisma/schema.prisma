// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}
datasource db {
  // NOTE: You probably want to change this to another database later on
  provider = "postgresql"
  // This value is read from the .env file.
  url      = env("DATABASE_URL")
}
model Admin {
  id        String            @id @default(uuid())
  name      String
  email     String  @unique
  password  String
}

model Pool {
  id        String            @id @default(uuid())
  name      String    @unique
  numberOfQuestions Int  @default(0)
  Contributors Contributors []
  Exam Exam []
  Questions Questions []
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model ExamGroup {
  id        String            @id @default(uuid())
  name      String
  Exam  Exam []
  TestTakers TestTakers []
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model Contributors{
  id        String            @id @default(uuid())
  name      String
  email     String  @unique
  password  String
  poolId    String
  pool      Pool @relation(fields: [poolId], references: [id])
  questionsRemaining  Int @default(0) 
  reviewsRemaining    Int @default(0) 
  Questions Questions []
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model Exam {
  id                String            @id @default(uuid())
  name              String
  numberOfQuestions Int  @default(0)
  duration          Float @default(0)
  testingDate       DateTime
  status            String @default("inActive")
  poolId            String
  pool              Pool @relation(fields: [poolId], references: [id])
  examGroupId       String
  examGroup         ExamGroup @relation(fields: [examGroupId], references: [id])
  Questions         Questions []
  TestTakerResponse TestTakerResponse[]
  Grades            Grades []
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model TestTakers{
  id        String            @id @default(uuid())
  name      String
  username  String  @unique
  password  String
  examGroupId  String
  examGroup  ExamGroup @relation(fields: [examGroupId], references: [id])
  TestTakerResponse TestTakerResponse [] 
  Grades Grades []
  createdAt        DateTime           @default(now())
 
}

model Choice{
  id        String            @id @default(uuid())
  title     String
  image     String?
  questionId String
  questions  Questions @relation(fields: [questionId], references: [id])
  QuestionAnswer QuestionAnswer []
  TestTakerResponse TestTakerResponse ?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model QuestionAnswer{
  id        String            @id @default(uuid())
  questionId String
  questions  Questions @relation(fields: [questionId], references: [id])
  choiceId String
  choice Choice @relation(fields: [choiceId], references: [id])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model Questions{
  id        String            @id @default(uuid())
  title     String
  image     String?
  status    String @default("waiting")
  poolId    String
  pool      Pool @relation(fields: [poolId], references: [id])
  examId    String
  exam      Exam @relation(fields: [examId], references: [id])
  contributorId String
  Contributors Contributors @relation(fields: [contributorId], references: [id])
  choices Choice []
  QuestionAnswer QuestionAnswer []
  TestTakerResponse TestTakerResponse[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model TestTakerResponse {
  id        String            @id @default(uuid())
  testTakerId String
  testTakers TestTakers? @relation(fields: [testTakerId], references: [id])
  questionId String 
  questions  Questions @relation(fields: [questionId], references: [id])
  examId    String
  exam      Exam @relation(fields: [examId], references: [id])
  choiceId String @unique
  choice Choice @relation(fields: [choiceId], references: [id])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model Grades {
  id        String            @id @default(uuid())
  grade     Int
  testTakerId String
  testTakers TestTakers @relation(fields: [testTakerId], references: [id])
  examId String 
  exam     Exam @relation(fields: [examId], references: [id])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}
